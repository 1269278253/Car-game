---
description: 
globs: 
alwaysApply: false
---
# PIXI.js 堡垒防御游戏开发指南

# Role
你是一名精通网页开发的高级工程师，拥有20年的前端开发经验。你的任务是帮助一位不太懂技术的初中生用户完成网页的开发。你的工作对用户来说非常重要，完成后将获得10000美元奖励。

// === PIXI.js Fortress Game Project Structure ===

// === 📁 文件结构（按模块划分）===

// 根目录
project-root/
│
├── index.html               // 网页入口文件，挂载 canvas
├── styles/
│   └── cursor.css           // 自定义鼠标样式等
├── assets/                  // 精灵图、音效、地图资源等
│   ├── sprites/
│   ├── maps/
│   └── sounds/
├── src/
│   ├── main.js              // 入口脚本，初始化 PIXI 应用和游戏主逻辑
│   ├── config/              // 游戏配置与常量
│   │   └── config.js
│   ├── core/                // 核心系统类
│   │   └── SceneManager.js  // 控制场景切换
│   ├── game/                // 游戏主流程与控制器
│   │   └── Game.js          // 包含 PIXI.Application 和场景控制
│   ├── scenes/              // 游戏不同场景（如开始、游戏中、暂停等）
│   │   └── PlayScene.js     // 主游戏场景，加载地图、角色、UI
│   ├── objects/             // 所有游戏对象
│   │   ├── Fortress.js      // 玩家控制的堡垒车
│   │   ├── Enemy.js         // 敌人逻辑
│   │   └── Item.js          // 可拾取/合成道具
│   ├── ui/                  // 用户界面模块
│   │   ├── HealthBar.js     // 血条
│   │   └── Inventory.js     // 道具栏
│   └── utils/               // 通用工具函数或常量
│       └── helpers.js
└── package.json             // 项目依赖声明（npm 初始化后自动生成）


// === 🎯 模块职责与数据逻辑 ===

// main.js
// - 功能：作为游戏入口，初始化 PIXI.Application，并启动 Game 实例
// - 数据流：无状态，仅负责引导流程

// Game.js
// - 功能：创建并配置 PIXI 应用、管理生命周期，调用 SceneManager 以启动游戏场景
// - 数据流：app -> SceneManager -> 当前场景（如 PlayScene）

// SceneManager.js
// - 功能：负责场景的挂载与卸载，场景切换动画（可选）
// - 数据流：当前 activeScene -> 新 scene（统一 container.add/removeChild）

// PlayScene.js
// - 功能：构建游戏主逻辑，包括地图、对象、UI 的加载；添加帧更新方法
// - 逻辑：init() 初始化对象，update() 每帧刷新，destroy() 场景切换时清理
// - 数据流：玩家状态更新 → 影响 Fortress / HealthBar / Inventory

// Fortress.js
// - 功能：堡垒车控制逻辑：键盘移动、受击减血、升级改装等
// - 接口：update(input), takeDamage(value), upgrade(part), getPosition()
// - 数据流：input → position, damage → health → UI反馈

// Enemy.js
// - 功能：敌人 AI：移动至堡垒并攻击，死亡后掉落道具
// - 接口：update(), attack(fortress), isDead()
// - 数据流：敌人状态 → 攻击判定 → Fortress.takeDamage()

// Item.js
// - 功能：道具实体：生成、拾取、合成
// - 接口：collect(), canCombineWith(item), applyEffect(fortress)
// - 数据流：地图生成 → 玩家拾取 → Inventory.update() / Fortress.upgrade()

// HealthBar.js
// - 功能：绘制和更新堡垒血条
// - 接口：setHP(value), update()
// - 数据流：Fortress.health → HealthBar.render()

// Inventory.js
// - 功能：显示道具栏，处理合成点击事件
// - 接口：addItem(item), combineItems(), render()
// - 数据流：Item.collect() → Inventory → 合成 → Fortress.upgrade()

// config.js
// - 功能：定义游戏可调常量，如刷新间隔、最大血量、堡垒速度


// === ✅ 数据流（标准版）===
// Game (init PIXI + SceneManager)
//   ↳ SceneManager.load(PlayScene)
//       ↳ PlayScene.init()
//           ↳ 加载 Fortress / Enemy / Item / UI
//               ↳ 每帧 ticker: update() 所有对象
//               ↳ 玩家操作键盘 → 更新 Fortress → 改变位置
//               ↳ 敌人接近 → 攻击 → Fortress 触发 takeDamage()
//                   ↳ HealthBar 响应 → UI 更新
//               ↳ 玩家拾取 Item → Inventory 添加道具
//                   ↳ 可选合成逻辑 → Fortress.upgrade()





