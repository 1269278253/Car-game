---
description: 
globs: 
alwaysApply: true
---
---
description: "开发经验与教训"
globs: ["**/*.js", "**/*.html", "**/*.css"]
alwaysApply: true
---

# 游戏开发经验教训和规则

## 代码重复和冲突预防
1. 新增功能前必须检查现有代码
   - 搜索相关类名和文件名
   - 检查是否已存在类似功能
   - 避免创建重复的场景或组件



2. 场景管理规范
   - 严格遵循单一场景管理原则
   - 场景切换逻辑统一在SceneManager中处理
   - 避免在多个地方创建相同功能的场景

3. UI组件维护规则
   - UI组件的更新方法必须考虑所有可能的状态
   - 在修改游戏对象时，同步更新相关UI组件
   - 确保UI组件在对象销毁时正确清理

## 资源管理规范
1. 图片素材集成规则
   - 添加新素材前，更新资源配置文件
   - 确保所有资源路径正确配置
   - 在使用素材前确保资源已加载完成

2. 资源加载检查
   - 实现资源预加载机制
   - 添加资源加载错误处理
   - 提供加载进度反馈

## 状态管理规则
1. 游戏对象状态
   - 所有游戏对象必须有明确的生命周期管理
   - 状态变化时同步更新相关组件
   - 对象销毁时清理所有关联资源

2. UI状态同步
   - UI组件必须及时反映游戏对象状态
   - 实现UI组件的错误边界处理
   - 保持UI更新的性能优化

## 错误处理规范
1. 错误预防
   - 添加必要的类型检查
   - 实现完整的空值处理
   - 确保异步操作的错误捕获

2. 错误恢复
   - 提供用户友好的错误提示
   - 实现状态回滚机制
   - 保持游戏可继续运行

## 代码重构原则
1. 重构时机
   - 发现重复代码时立即重构
   - 功能扩展前进行必要重构
   - 定期检查和优化代码结构

2. 重构步骤
   - 先确保现有功能的测试覆盖
   - 小步骤进行重构
   - 每步重构后验证功能完整性

## 测试规范
1. 功能测试
   - 新功能必须进行完整测试
   - 修改后回归测试相关功能
   - 测试边界条件和异常情况

2. 性能测试
   - 监控游戏帧率
   - 优化资源加载性能
   - 定期进行性能评估

## 文档维护
1. 代码文档
   - 及时更新API文档
   - 记录关键算法和实现
   - 标注重要的依赖关系

2. 变更记录
   - 记录重要的设计决策
   - 维护版本更新日志
   - 标注已知问题和解决方案

## 最佳实践
1. 开发流程
   - 先设计后实现
   - 增量式开发
   - 持续集成和测试

2. 代码质量
   - 遵循代码规范
   - 保持代码简洁
   - 注重代码可维护性

3. 性能优化
   - 优化渲染性能
   - 合理管理内存
   - 控制资源加载
   
避免以下错误：
   
未检查文件存在性：在引用资源（如 smoke.png）前，没有先使用工具确认文件是否存在，导致加载失败或 404 错误。
路径配置错误：多次出现路径问题，例如添加多余前缀（如 public/）、使用不存在的文件名，或混淆资源别名和实际路径，造成资源加载中断。
重复修复失误：对相同问题（如资源路径）反复编辑，但没有彻底验证更改是否生效，导致效率低下。
忽略预检查流程：没有严格遵循开发规则（如先搜索和检查现有代码/资源），直接假设文件或路径正确，违反了“新增功能前必须检查现有代码”的原则。
代码变更不彻底：在编辑文件时，部分更改未应用或遗漏相关资源（如坦克身体资源），增加了不必要的迭代。
这些错误导致了多次资源加载失败，影响了开发效率。
